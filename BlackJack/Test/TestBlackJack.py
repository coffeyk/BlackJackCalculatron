'''
Created on Dec 17, 2012

@author: Kevin
'''
import unittest
import random
from BlackJack.Helpers import cardLookup, faceValue
from blackjack import calcWinPerPlayers




class TestBlackjack(unittest.TestCase):
    
    def testCardLookup(self):
        self.assertEqual(cardLookup(0), ('A', 'h'))
        self.assertEqual(cardLookup(1), ('2', 'h'))
        self.assertEqual(cardLookup(2), ('3', 'h'))
        self.assertEqual(cardLookup(3), ('4', 'h'))
        self.assertEqual(cardLookup(4), ('5', 'h'))
        self.assertEqual(cardLookup(5), ('6', 'h'))
        self.assertEqual(cardLookup(6), ('7', 'h'))
        self.assertEqual(cardLookup(7), ('8', 'h'))
        self.assertEqual(cardLookup(8), ('9', 'h'))
        self.assertEqual(cardLookup(9), ('10', 'h'))
        self.assertEqual(cardLookup(10), ('J', 'h'))
        self.assertEqual(cardLookup(11), ('Q', 'h'))
        self.assertEqual(cardLookup(12), ('K', 'h'))
        self.assertEqual(cardLookup(13), ('A', 'c'))
        self.assertEqual(cardLookup(14), ('2', 'c'))
        self.assertEqual(cardLookup(15), ('3', 'c'))
        self.assertEqual(cardLookup(16), ('4', 'c'))
        self.assertEqual(cardLookup(17), ('5', 'c'))
        self.assertEqual(cardLookup(18), ('6', 'c'))
        self.assertEqual(cardLookup(19), ('7', 'c'))
        self.assertEqual(cardLookup(20), ('8', 'c'))
        self.assertEqual(cardLookup(21), ('9', 'c'))
        self.assertEqual(cardLookup(22), ('10', 'c'))
        self.assertEqual(cardLookup(23), ('J', 'c'))
        self.assertEqual(cardLookup(24), ('Q', 'c'))
        self.assertEqual(cardLookup(25), ('K', 'c'))
        self.assertEqual(cardLookup(26), ('A', 'd'))
        self.assertEqual(cardLookup(27), ('2', 'd'))
        self.assertEqual(cardLookup(28), ('3', 'd'))
        self.assertEqual(cardLookup(29), ('4', 'd'))
        self.assertEqual(cardLookup(30), ('5', 'd'))
        self.assertEqual(cardLookup(31), ('6', 'd'))
        self.assertEqual(cardLookup(32), ('7', 'd'))
        self.assertEqual(cardLookup(33), ('8', 'd'))
        self.assertEqual(cardLookup(34), ('9', 'd'))
        self.assertEqual(cardLookup(35), ('10', 'd'))
        self.assertEqual(cardLookup(36), ('J', 'd'))
        self.assertEqual(cardLookup(37), ('Q', 'd'))
        self.assertEqual(cardLookup(38), ('K', 'd'))
        self.assertEqual(cardLookup(39), ('A', 's'))
        self.assertEqual(cardLookup(40), ('2', 's'))
        self.assertEqual(cardLookup(41), ('3', 's'))
        self.assertEqual(cardLookup(42), ('4', 's'))
        self.assertEqual(cardLookup(43), ('5', 's'))
        self.assertEqual(cardLookup(44), ('6', 's'))
        self.assertEqual(cardLookup(45), ('7', 's'))
        self.assertEqual(cardLookup(46), ('8', 's'))
        self.assertEqual(cardLookup(47), ('9', 's'))
        self.assertEqual(cardLookup(48), ('10', 's'))
        self.assertEqual(cardLookup(49), ('J', 's'))
        self.assertEqual(cardLookup(50), ('Q', 's'))
        self.assertEqual(cardLookup(51), ('K', 's'))

    def testFaceValue(self):
        self.assertEqual(faceValue(0), 1)
        self.assertEqual(faceValue(1), 2)
        self.assertEqual(faceValue(2), 3)
        self.assertEqual(faceValue(3), 4)
        self.assertEqual(faceValue(4), 5)
        self.assertEqual(faceValue(5), 6)
        self.assertEqual(faceValue(6), 7)
        self.assertEqual(faceValue(7), 8)
        self.assertEqual(faceValue(8), 9)
        self.assertEqual(faceValue(9), 10)
        self.assertEqual(faceValue(10), 10)
        self.assertEqual(faceValue(11), 10)
        self.assertEqual(faceValue(12), 10)
        self.assertEqual(faceValue(13), 1)
        self.assertEqual(faceValue(14), 2)
        self.assertEqual(faceValue(15), 3)
        self.assertEqual(faceValue(16), 4)
        self.assertEqual(faceValue(17), 5)
        self.assertEqual(faceValue(18), 6)
        self.assertEqual(faceValue(19), 7)
        self.assertEqual(faceValue(20), 8)
        self.assertEqual(faceValue(21), 9)
        self.assertEqual(faceValue(22), 10)
        self.assertEqual(faceValue(23), 10)
        self.assertEqual(faceValue(24), 10)
        self.assertEqual(faceValue(25), 10)
        self.assertEqual(faceValue(26), 1)
        self.assertEqual(faceValue(27), 2)
        self.assertEqual(faceValue(28), 3)
        self.assertEqual(faceValue(29), 4)
        self.assertEqual(faceValue(30), 5)
        self.assertEqual(faceValue(31), 6)
        self.assertEqual(faceValue(32), 7)
        self.assertEqual(faceValue(33), 8)
        self.assertEqual(faceValue(34), 9)
        self.assertEqual(faceValue(35), 10)
        self.assertEqual(faceValue(36), 10)
        self.assertEqual(faceValue(37), 10)
        self.assertEqual(faceValue(38), 10)
        self.assertEqual(faceValue(39), 1)
        self.assertEqual(faceValue(40), 2)
        self.assertEqual(faceValue(41), 3)
        self.assertEqual(faceValue(42), 4)
        self.assertEqual(faceValue(43), 5)
        self.assertEqual(faceValue(44), 6)
        self.assertEqual(faceValue(45), 7)
        self.assertEqual(faceValue(46), 8)
        self.assertEqual(faceValue(47), 9)
        self.assertEqual(faceValue(48), 10)
        self.assertEqual(faceValue(49), 10)
        self.assertEqual(faceValue(50), 10)
        self.assertEqual(faceValue(51), 10)
    
    def testCalcWinPerPlayers(self):
        # Fixed seed helps spot functional changes to the algorithms
        random.seed(0)
        hardcodedAnswer = [[0, 0.0549735130598972, -0.37724131987702908], [0, -0.12758022549869905, -0.04873196312254862], [0, 0.4305567511729006, 0.35631463053226142], [0, -0.28197285905212294, 0.091972785596190432], [0, -0.32339640604545994, 0.18718139464421446]]
        result = calcWinPerPlayers()
        self.assertEqual(result, hardcodedAnswer)
